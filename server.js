// server.js
const express = require('express');
const axios = require('axios');
const crypto = require('crypto');

const app = express();
const port = process.env.PORT || 10000;

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bybit ===
const API_KEY = 'kdvapQWoGxJW8ILWCy'; // ‚Üê –ó–∞–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å)
const API_SECRET = 'vHd41ahtmvyXUzi1PyVKFXxpZ2LZrShPI969'; // ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç!

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HMAC-SHA256 –ø–æ–¥–ø–∏—Å–∏
function generateSignature(secret, message) {
  return crypto.createHmac('sha256', secret).update(message).digest('hex');
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç: /balance ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
app.get('/balance', async (req, res) => {
  const timestamp = Date.now().toString(); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
  const recvWindow = '10000';
  const endpoint = '/v5/account/wallet-balance';
  const params = 'accountType=UNIFIED';

  // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¢–û–ß–ù–û –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Bybit
  const queryString = `?${params}`;
  const message = `${timestamp}${API_KEY}${recvWindow}${endpoint}${queryString}`;

  console.log('üîß [DEBUG] Message for signature:', message); // –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

  const signature = generateSignature(API_SECRET, message);

  const url = `https://api.bybit.com${endpoint}${queryString}`;

  console.log('üì§ [DEBUG] Sending request to:', url);
  console.log('üîë [DEBUG] Using signature:', signature);

  try {
    const response = await axios.get(url, {
      headers: {
        'X-BAPI-API-KEY': API_KEY,
        'X-BAPI-SIGN': signature,
        'X-BAPI-TIMESTAMP': timestamp,
        'X-BAPI-RECV-WINDOW': recvWindow,
        'Content-Type': 'application/json',
      },
    });

    console.log('‚úÖ [SUCCESS] Response from Bybit:', response.data.retMsg);

    const wallet = response.data.result?.list?.[0];
    const usdt = wallet?.coin?.find(c => c.coin === 'USDT');

    res.json({
      success: true,
      total: usdt ? parseFloat(usdt.walletBalance) : 0,
      available: usdt ? parseFloat(usdt.availableToWithdraw) : 0,
      raw: response.data.retMsg,
    });
  } catch (error) {
    console.error('‚ùå [ERROR] Bybit API error:', error.response?.data || error.message);
    res.status(500).json({
      success: false,
      error: error.response?.data?.retMsg || error.message,
      raw: error.response?.data || null,
    });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤
app.get('/', (req, res) => {
  res.send('Bybit Proxy Server —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø: <a href="/balance">/balance</a>');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üåê –û—Ç–∫—Ä–æ–π: https://your-service-name.onrender.com/balance`);
});


